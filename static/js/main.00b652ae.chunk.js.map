{"version":3,"sources":["components/Card/Card.js","components/Grid/Grid.js","components/Nav/Nav.js","components/Sounds/Sounds.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","concat","won","id","onClick","handleImgClick","src","image","alt","Grid","shake","children","Nav","style","color","href","score","topScore","Sounds","state","song","playing","audio","Audio","togglePlayPause","_this","setState","pause","play","this","Component","App","heroes","handleClick","doubleClicked","audio2","update","Object","toConsumableArray","forEach","hero","clicked","length","sort","Math","random","_this2","components_Sounds_Sounds","soundTrack","document","getElementById","components_Nav_Nav","components_Grid_Grid","map","components_Card_Card","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.00b652ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n\r\n  <div className={`card ${props.won ? \" won\" : \"\"}`} id={props.id} onClick={props.handleImgClick}>\r\n    <img className=\"card-img\" src={props.image} alt=\"Hero\"  />\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n\r\n","import React from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = props => (\r\n\r\n  <div className={`container ${props.shake ? \" shake\" : \"\"}`}>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Grid;","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n  <nav className=\"navbar navbar-dark bg-dark\">\r\n    <h2 style={{color:\"white\"}}>Clicky Game</h2>\r\n\r\n    <span className=\"navbar-text\">\r\n      click all images only once to win.\r\n    </span>\r\n    <ul className=\"nav text-white nav-fills\">\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link\" href=\"#!\">  SCORE {props.score} | TOPSCORE {props.topScore}</span>\r\n      </li>\r\n    </ul>\r\n\r\n  </nav>\r\n\r\n)\r\n\r\nexport default Nav;","// Needs fontawesome link and sounds in public/assets/music to make this work\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./Sounds.css\";\r\n\r\nclass Sounds extends Component {\r\n\r\n    state = {\r\n        song: [],\r\n        playing: false\r\n    };\r\n\r\n    audio = new Audio();\r\n\r\n    togglePlayPause = () => {\r\n            this.audio.src=\"/assets/music/BatmanBegins.mp3\";\r\n        if(!this.state.playing) {\r\n            this.setState({playing: true});\r\n            this.audio.play();\r\n        } else {\r\n            this.setState({playing: false});\r\n            this.audio.pause();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return(\r\n        <div>\r\n            {/* <audio id=\"soundTrack\" src=\"/assets/music/BatmanBegins.mp3\" loop=\"loop\" autoPlay>\r\n                Your browser doesn't support the <code>audo</code> element.\r\n            </audio> */}\r\n            <button className=\"btn btn-info\" onClick={this.togglePlayPause}><i className=\"fas fa-volume-up\"></i></button>\r\n        </div>\r\n    )}\r\n};\r\n\r\nexport default Sounds;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport heroes from \"./heroes.json\";\r\nimport Card from \"./components/Card\";\r\nimport Grid from \"./components/Grid\";\r\nimport Nav from \"./components/Nav\";\r\nimport Sounds from \"./components/Sounds\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    heroes,\r\n    score: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  handleClick = id => {\r\n    // double clicked flag\r\n    let doubleClicked = false;\r\n\r\n    // win and lost sounds\r\n    let audio = new Audio();\r\n    let audio2 = new Audio();\r\n    \r\n    // a state snapshot to minimize state updates\r\n    let update = {\r\n      heroes: [...this.state.heroes],\r\n      score: this.state.score,\r\n      topScore: this.state.topScore,\r\n    }\r\n    // click updates\r\n    update.heroes.forEach(hero => {\r\n      if (hero.id === id) {\r\n        if (hero.clicked) {\r\n          doubleClicked = true;\r\n          audio.src = \"/assets/music/lost.mp3\";\r\n          audio2.src = \"/assets/music/man-laughing.mp3\";\r\n          audio2.play();\r\n        } else { \r\n          audio.src = \"/assets/music/win.mp3\"\r\n        };\r\n        audio.play();\r\n        hero.clicked = true;\r\n        update.score++;\r\n        if (update.score > update.topScore) {\r\n          update.topScore = update.score;\r\n        };\r\n      }\r\n    })\r\n    \r\n    // reset score and clicked state in all cards if a card was clicked twice.\r\n    if (doubleClicked) {\r\n      update.heroes.forEach(hero => hero.clicked = false);\r\n      update.score = 0;\r\n    };\r\n\r\n    // reset clicked in cards if all cards where clicked once\r\n    if (update.score && !(update.score % update.heroes.length)) {\r\n      audio2.src = \"/assets/music/win2.mp3\";\r\n      audio2.play();\r\n      update.heroes.forEach(hero => hero.clicked = false);\r\n    };\r\n\r\n    // randomize heroes\r\n    update.heroes = update.heroes.sort(() => 0.5 - Math.random());\r\n    \r\n    // update state\r\n    this.setState({heroes: update.heroes,score: update.score,topScore: update.topScore});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Sounds soundTrack ={document.getElementById(\"soundTrack\")}/>\r\n        <Nav score={this.state.score} topScore={this.state.topScore} />\r\n        <Grid shake={!this.state.score && this.state.topScore}>\r\n          {this.state.heroes.map(hero => (\r\n            <Card\r\n              key={hero.id}\r\n              won={this.state.score && !(this.state.score % this.state.heroes.length)}\r\n              id={hero.id}\r\n              image={hero.image}\r\n              handleImgClick={() => this.handleClick(hero.id)}\r\n            />\r\n          ))}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}